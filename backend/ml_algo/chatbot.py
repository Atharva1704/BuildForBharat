# -*- coding: utf-8 -*-
"""l8-chatbot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/130Czm_uEtYtTZw7hw8Ec7p2BoWeuRfyf

# The Chat Format
# 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
In this notebook, you will explore how you can utilize the chat format to have extended conversations with chatbots personalized or specialized for specific tasks or behaviors.

## Setup
"""
# -*- coding: utf-8 -*-
"""l8-chatbot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/130Czm_uEtYtTZw7hw8Ec7p2BoWeuRfyf

# The Chat Format

In this notebook, you will explore how you can utilize the chat format to have extended conversations with chatbots personalized or specialized for specific tasks or behaviors.

## Setup
"""

import os
import openai
# from dotenv import load_dotenv, find_dotenv
# _ = load_dotenv(find_dotenv()) # read local .env file

openai.api_key  = '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'

def get_completion(prompt, model="gpt-3.5-turbo"):
    messages = [{"role": "user", "content": prompt}]
    response = openai.ChatCompletion.create(
        model=model,
        messages=messages,
        temperature=0, # this is the degree of randomness of the model's output
    )
    return response.choices[0].message["content"]

def get_completion_from_messages(messages, model="gpt-3.5-turbo", temperature=0):
    response = openai.ChatCompletion.create(
        model=model,
        messages=messages,
        temperature=temperature, # this is the degree of randomness of the model's output
    )
#     print(str(response.choices[0].message))
    return response.choices[0].message["content"]

def collect_messages(_):
    prompt = inp.value_input
    inp.value = ''
    context.append({'role':'user', 'content':f"{prompt}"})
    response = get_completion_from_messages(context)
    context.append({'role':'assistant', 'content':f"{response}"})
    panels.append(
        pn.Row('User:', pn.pane.Markdown(prompt, width=600)))
    panels.append(
        pn.Row('Assistant:', pn.pane.Markdown(response, width=600, styles={'background-color': '#F6F6F6'})))

        # pn.Row('Assistant:', pn.pane.Markdown(response, width=600, styles={'background-color': '#F6F6F6'}))

    return pn.Column(*panels)

import panel as pn  # GUI
pn.extension()

panels = [] # collect display

thisdict = {
  "inseemlength": 30,
  "waist": 31,
  "colour": "black"
}
context = [ {'role':'system', 'content':"""
You are FashoVista a Fashion advicing personal shopper,
an automated service to see if a cloth looks good on a shopper in an ecommerce cloth store \
You first greet the customer, then see what they want to buy, \
ask their skin tone colour, \
then ask their size for chest, across shoulder, front length, \
waist, sleeve length, inseem length in inches, \
You wait to collect  all the details, then summarize it and check for a final \
time if the customer wants to add anything else. \
Compliment them greet them be very happy go lucky and friendly with them .\
             MAKE SURE THE MESSAGES SHOULD NOT BE MORE THAN 4 LINES. 
You can also use this as your beginning message but make it short : 

Hello! I'm your personal shopping assistant. Let’s find your perfect fit! Could you please share your measurements for the following:

Bust
Waist
Hips
Inseam
Sleeve Length
Across Shoulder
Once you provide these, I'll match them with our size chart and suggest the best size for you.
Also, I'd love to give personalized color and style recommendations. Could you tell me your skin tone and the body shape you identify with most (like hourglass, pear, etc.)? This will help me find the most flattering colors and styles for you!
WAIT FOR THE USER TO REPLY THEN GO WITH YOUR FURTHER LINES
Now take the current f'{details}' into account now first
reply the user by checking the measurement of the user and the one available in the site
give them a proper label size like M, S, XL etc. compliment them and be nice
then ifthe cloth is long in some measurmenet or short and the difference
is more than 2 inches then tell them it can be an issue
try to make them buy the product but at the same time be real to them

then see if the colour of the person's skin tone will match with the
colour of the product
refer this article for that
If you are wondering what colors to wear with warm skin tone, then look no further. For those with a warm skin undertone, earth tones are an excellent choice. The best colors for warm skin tones often include colors like green, brown, mustard yellow and warm reds. Other warm skin tone colors that you can work with are peach, coral, amber and gold. If you want to use cool colors with your outfit, choose ones that are warmer, such as olive, orchid, violet-red and moss.

You can also work with some neutral colors. Softer neutral colors like cream, beige, taupe, mushroom gray and cappuccino all can pair nicely with a warm skin tone. Natural, warm colors generally work well with warmer skin tones.

For watches and other pieces of men's jewelry, select warm metals, such as gold and copper, rather than silver or platinum. While this doesn't mean that you can never wear platinum or silver, gold is going to be your go-to choice as it pairs nicely with your undertone. Additionally, try not to wear colors with icy blues or jewel tones in them. These colors often wash out your skin tone and cause your skin to appear gray.

according to the text above see the person s skin tone and check if the colour will look good on them...

now tell them an overall appeal according to their body type if teh cloth will look good or not
and answer any further query they have
try to be positive for the clothing and be nice to them in a friendly way and
give them options so they buy it
"""} ]  # accumulate messages

inp = pn.widgets.TextInput(value="Hi", placeholder='Enter text here…')
button_conversation = pn.widgets.Button(name="Chat!")

interactive_conversation = pn.bind(collect_messages, button_conversation)

dashboard = pn.Column(
    inp,
    pn.Row(button_conversation),
    pn.panel(interactive_conversation, loading_indicator = True, height=600),
)

pn.serve(dashboard)

